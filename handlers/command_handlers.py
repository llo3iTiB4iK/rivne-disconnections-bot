from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, LinkPreviewOptions
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest

from functions.database_manager import db
from functions.schedule import schedule
from forms.bot_state import BotState


async def start(message: Message):
    kb_buttons = [[InlineKeyboardButton(text=str(turn/10), callback_data=str(turn))] for turn in schedule.turns_list]
    kb_buttons = [kb_buttons[i] + kb_buttons[i+1] for i in range(0, len(kb_buttons), 2)]

    keyboard = InlineKeyboardMarkup(inline_keyboard=kb_buttons)
    await message.answer(f"–û–±–µ—Ä—ñ—Ç—å —Å–≤–æ—é —á–µ—Ä–≥—É –≤—ñ–¥–∫–ª—é—á–µ–Ω—å –Ω–∏–∂—á–µ!\n –í–∏ –º–æ–∂–µ—Ç–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—å —Å–≤–æ—é —á–µ—Ä–≥—É –≤—ñ–¥–∫–ª—é—á–µ–Ω—å –∑–∞ "
                         f"–ø–æ—Å–∏–ª–∞–Ω–Ω—è–º–∏: üìç–ú—ñ—Å—Ç–æ –†—ñ–≤–Ω–µ: https://shorturl.at/oMXLU\nüìç–†—ñ–≤–Ω–µ–Ω—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å: "
                         f"https://shorturl.at/zVUTT", link_preview_options=LinkPreviewOptions(is_disabled=True),
                         reply_markup=keyboard, parse_mode='HTML')


async def show_disconnections(message: Message, state: FSMContext):
    await state.set_state(BotState.location_added)
    user_locations = await db.get_user_locations(message.chat.id)
    if len(user_locations):
        kb_buttons = []
        for location in user_locations:
            kb_buttons.append([InlineKeyboardButton(text=location["location"] if location["location"] else
                                                    "–õ–æ–∫–∞—Ü—ñ—è –±–µ–∑ –Ω–∞–∑–≤–∏", callback_data=f"turn {location['turn']}")])
        keyboard = InlineKeyboardMarkup(inline_keyboard=kb_buttons)
        await message.answer("<i>–û–±–µ—Ä—ñ—Ç—å –æ–¥–Ω—É –∑ –í–∞—à–∏—Ö –ª–æ–∫–∞—Ü—ñ–π, –¥–µ –í–∏ —Ö–æ—á–µ—Ç–µ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫–∏ –≤—ñ–¥–∫–ª—é—á–µ–Ω—å</i>",
                             reply_markup=keyboard, parse_mode='HTML')
    else:
        await message.answer('<b>–°—Ö–æ–∂–µ, —â–æ –í–∏ —â–µ –Ω–µ –¥–æ–¥–∞–ª–∏ –∂–æ–¥–Ω–æ—ó –ª–æ–∫–∞—Ü—ñ—ó, –í–∏ –º–æ–∂–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ —Ü–µ —É "–ú–æ—ó—Ö –ª–æ–∫–∞—Ü—ñ—è—Ö" '
                             '—É –º–µ–Ω—é!</b>', parse_mode='HTML')


async def show_locations(message: Message, state: FSMContext):
    await state.set_state(BotState.location_added)
    user_locations = await db.get_user_locations(message.chat.id)
    kb_buttons = []
    if len(user_locations):
        for location in user_locations:
            kb_buttons.append([InlineKeyboardButton(text=location["location"] if location["location"] else
                                                    "–õ–æ–∫–∞—Ü—ñ—è –±–µ–∑ –Ω–∞–∑–≤–∏", callback_data=f"delete_location {location['id']}")])
        msg_text = "<i>–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –æ–¥–Ω—É –∑ –í–∞—à–∏—Ö –ª–æ–∫–∞—Ü—ñ–π, —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏ —ó—ó –∞–±–æ –æ–±–µ—Ä—ñ—Ç—å <u>'–î–æ–¥–∞—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é'</u> –¥–ª—è " \
                   "–¥–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó!</i>"
    else:
        msg_text = '<b>–°—Ö–æ–∂–µ, —â–æ –í–∏ —â–µ –Ω–µ –¥–æ–¥–∞–ª–∏ –∂–æ–¥–Ω–æ—ó –ª–æ–∫–∞—Ü—ñ—ó!</b>'
    kb_buttons.append([InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é ‚ûï", callback_data="add_location")])
    keyboard = InlineKeyboardMarkup(inline_keyboard=kb_buttons)
    try:
        await message.answer(msg_text, reply_markup=keyboard, parse_mode='HTML')
    except TelegramBadRequest:
        pass


async def notifications(message: Message, state: FSMContext):
    await state.set_state(BotState.location_added)
    button1 = InlineKeyboardButton(text='15 —Ö–≤', callback_data='15 —Ö–≤')
    button2 = InlineKeyboardButton(text='30 —Ö–≤', callback_data='30 —Ö–≤')
    button3 = InlineKeyboardButton(text='60 —Ö–≤', callback_data='60 —Ö–≤')
    notify_by = await db.get_user_notification_time(message.chat.id)
    if notify_by is None:
        msg_text = "–û–±–µ—Ä—ñ—Ç—å, –∑–∞ —Å–∫—ñ–ª—å–∫–∏ —á–∞—Å—É –í–∏ —Ö–æ—Ç—ñ–ª–∏ –±–∏ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è:"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[button1, button2, button3]])
    elif not notify_by:
        await message.answer('<b>–°—Ö–æ–∂–µ, —â–æ –í–∏ —â–µ –Ω–µ –¥–æ–¥–∞–ª–∏ –∂–æ–¥–Ω–æ—ó –ª–æ–∫–∞—Ü—ñ—ó!</b>', parse_mode='HTML')
        return
    else:
        msg_text = f"–ù–∞—Ä–∞–∑—ñ –í–∏ –æ—Ç—Ä–∏–º—É—î—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∑–∞ {notify_by} —Ö–≤ –¥–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω—å\n–í–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂—á–µ, —â–æ–± " \
                   f"–∑–º—ñ–Ω–∏—Ç–∏ —á–∞—Å –¥–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è, –∑–∞ —è–∫–∏–π –í–∏ –±—É–¥–µ—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∞–±–æ –≤–∏–º–∫–Ω—É—Ç–∏ —ó—Ö"
        cancel_button = InlineKeyboardButton(text='–í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—å –≤—ñ–¥ —Å–ø–æ–≤—ñ—â–µ–Ω—å', callback_data='turn_off_notifications')
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[button1, button2, button3], [cancel_button]])
    await message.answer(msg_text, reply_markup=keyboard)


async def support(message: Message, state: FSMContext):
    await message.answer("<i>–ù–∞–ø–∏—à—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –í–∞—à–∏–º–∏ —Å–∫–∞—Ä–≥–∞–º–∏ –∞–±–æ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—è–º–∏, –≤ —è–∫–æ–º—É –¥–µ—Ç–∞–ª—å–Ω–æ –æ–ø–∏—à—ñ—Ç—å –í–∞—à—É "
                         "–ø—Ä–æ–±–ª–µ–º—É –∞–±–æ —ñ–¥–µ—é!</i>", parse_mode='HTML')
    await state.set_state(BotState.waiting_for_support_message)


async def donate(message: Message, state: FSMContext):
    await state.set_state(BotState.location_added)
    await message.answer("__–í–∏ –º–æ–∂–µ—Ç–µ –ø—ñ–¥—Ç—Ä–∏–º–∞—Ç–∏ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–∞ \(@i\_v\_a\_n\_0\) –∑–∞ —Ä–µ–∫–≤—ñ–∑–∏—Ç–∞–º–∏:__\n\n"
                         "‚ö´–ú–æ–Ω–æ–±–∞–Ω–∫‚ö´: `4441 1110 4500 5703`\n\nüü¢–ü—Ä–∏–≤–∞—Ç–±–∞–Ω–∫üü¢: `4149 4390 2671 1949`",
                         parse_mode='MarkdownV2')
